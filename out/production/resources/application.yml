# Server
server:
  port: 8011

## FLYWAY
#flyway:
#  baseline-description: #
#  baseline-version: 1 # version to start migration
#  baseline-on-migrate: #
#  check-location: false # Check that migration scripts location exists.
#  clean-on-validation-error: #
#  enabled: true # Enable flyway.
#  encoding: #
#  ignore-failed-future-migration: #
#  init-sqls: # SQL statements to execute to initialize a connection immediately after obtaining it.
#  locations: filesystem:/weather/db/migration  # locations of migrations scripts ,classpath:db/migration || filesystem:/weather/db/migration
#  out-of-order: #
#  password: # JDBC password if you want Flyway to create its own DataSource
#  placeholder-prefix: #
#  placeholder-replacement: #
#  placeholder-suffix: #
#  placeholders.*: #
#  schemas: # schemas to update
#  sql-migration-prefix: V #
#  sql-migration-separator: #
#  sql-migration-suffix: .sql #
#  table: #
#  url: # JDBC url of the database to migrate. If not set, the primary configured data source is used.
#  user: # Login user of the database to migrate.
#  validate-on-migrate:
#
#
#
## DataBase Driver
#
#spring:
#  datasource:
#    type: com.alibaba.druid.pool.DruidDataSource
#    url: jdbc:mysql://127.0.0.1:3306/weather?useUnicode=true&characterEncoding=utf-8
#    username: root
#    password:
#    driverClassName: com.mysql.jdbc.Driver
## Pool
#    initialSize: 5
#    minIdle: 5
#    maxActive: 20
#    maxWait: 60000
#    timeBetweenEvictionRunsMillis: 60000
#    minEvictableIdleTimeMillis: 300000
#    validationQuery: SELECT 1 FROM DUAL
#    testWhileIdle: true
#    testOnBorrow: false
#    testOnReturn: false
#    poolPreparedStatements: true
#    maxPoolPreparedStatementPerConnectionSize: 20
#    filters: stat,wall,log4j
#    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
#



logging:
  config: classpath:logback.xml


# LOGGING
#logging.config= # Location of the logging configuration file. For instance `classpath:logback.xml` for Logback
#logging.exception-conversion-word=%wEx # Conversion word used when logging exceptions.
#logging.file= # Log file name. For instance `myapp.log`
#logging.level.*= # Log levels severity mapping. For instance `logging.level.org.springframework=DEBUG`
#logging.path= # Location of the log file. For instance `/var/log`
#logging.pattern.console= # Appender pattern for output to the console. Only supported with the default logback setup.
#logging.pattern.file= # Appender pattern for output to the file. Only supported with the default logback setup.
#logging.pattern.level= # Appender pattern for log level (default %5p). Only supported with the default logback setup.
#logging.register-shutdown-hook=false


# PROFILE
#spring:
#  profiles:
#    active: dev
##    active: dev
#  #cluster 数据源配置
#  datasource:
#    cluster:
#      driverClassName: oracle.jdbc.driver.OracleDriver
#      url: jdbc:oracle:thin:@xxx.xx.xx.xx:1521:orcl
#      username: test
#      password: test
#  thymeleaf:
#    cache: false
#  output:
#    ansi:
#      enabled: always
#---
##生产环境
#spring:
#  profiles: proc
##  master 数据源配置
#  datasource:
#    master:
#      driverClassName: oracle.jdbc.driver.OracleDriver
#      url: jdbc:oracle:thin:@xxx.xx.xx.xx:1521:orcl
#      username: test
#      password: test
#  application:
#    name: 生产环境
#---
##测试环境
#spring:
#  profiles: dev
##  master 数据源配置
#  datasource:
#    master:
#      driverClassName: oracle.jdbc.driver.OracleDriver
#      url: jdbc:oracle:thin:@localhost:1521:orcl
#      username: test
#      password: test
#  application:
#    name: 测试环境





